package com.example.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.domain.BoardVO;
import com.example.service.BoardService;

/*
 	[Restful 방식]
  		의미 		http 메소드
  		Create	POST(*)	
  		Read	GET(*)		
  		Update	PUT
  		Delete	DELETE
  		
  		(*)표준
  		
  	[기존 URL과 Restful 방식 비교]						이렇게 CRUD 작성하면 됨!
  	` 게시판 목록보기	/board/getBoardList				/board			GET
  	` 게시글 입력화면	/board/insertBoard				/board/write	GET	 (화면에 나타내는거)
  	` 게시글 입력(작성)	/board/saveBoard				/board/write	POST (진짜 입력, 실제로 저장하는거)
  	` 게시글 상세보기	/board/getBoard?seq=글번호		/board/글번호		GET
  	` 게시글 수정		/board/updateBoard?seq=글번호		/board/글번호		PUT
  	` 게시글 삭제 		/board/deleteBoard?seq=글번호		/board/글번호		DELETE
 */



@CrossOrigin(origins = "http://localhost:3000") // 3000번에서 넘어오는 애들은 받아줄거라고 지정하는 것
// 화면, 뷰페이지를 띄우지 않는 것들이 RestController
@RestController //★★★★★★★★★ 비동기 방식, 100% ajax로 작업한 경우 사용
@RequestMapping("/api") // 서버단은 api라는 url사용
public class BoardRestfulController {
	
	Logger logger = LoggerFactory.getLogger(BoardRestfulController.class);
	
	@Autowired 
	private BoardService service;
	
//	get방식만 확인 가능.
	@GetMapping("/board") 
	public List<BoardVO> getBoardList() {
		logger.info("[BoardController - getBoardList] 요청");
	    List<BoardVO> listBoard = service.getBoardList();

	    return listBoard;
	}

	
	@PostMapping("/board/write")
	public void saveBoard(BoardVO vo) {
		logger.info("[BoardController - saveBoard] 요청"); 
		service.saveBoard(vo); 
	}
	
	@GetMapping("/board/{seq}")
	public BoardVO getBoard(@PathVariable Integer seq) {
		logger.info("[BoardController - getBoard] 요청"); 
		BoardVO vo = new BoardVO();
		vo.setSeq(seq);
	    BoardVO result = service.getBoard(vo);
	    
	    return result;
	}
	
	@PutMapping("/board/{seq}")
	public void updateBoard(@PathVariable Integer seq) {
		logger.info("[BoardController - updateBoard] 요청으로 수정합니다"); 
	}
	
//	@DeleteMapping("/board/{seq}")
//	public void deleteBoard(@PathVariable Integer seq) {
//		logger.info("[BoardController - deleteBoard] 요청으로 삭제합니다"); 
//	}
	
	
	@DeleteMapping("/board/{seq}")
	public void deleteBoard(@PathVariable Integer seq) {
	    logger.info("[BoardController - deleteBoard] 삭제 - seq: " + seq); 
	    
	    BoardVO vo = new BoardVO();
	    vo.setSeq(seq);
	    service.deleteBoard(vo);
	}	
	
//	@RequestMapping("/updateBoard")
//	public String updateBoard(BoardVO vo) {
//	    logger.info("[BoardController - updateBoard] 요청");
//	    service.updateBoard(vo);
//	    return "redirect:getBoardList";
//	}
//
//	@RequestMapping("/deleteBoard")
//	public String deleteBoard(BoardVO vo) {
//	    logger.info("[BoardController - deleteBoard] 요청");
//	    // 게시글 삭제 처리
//	    service.deleteBoard(vo);
//	    return 
//	}
}
